{"ast":null,"code":"var _jsxFileName = \"D:\\\\Student_Database_IITBH\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport Search from './Components/Search';\nimport Navbar from './Components/Navbar';\nimport Cards from './Components/Card';\nimport React, { useEffect, useContext, useState, createContext } from 'react';\nimport { useGoogleOneTapLogin } from '@react-oauth/google';\nimport { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';\nimport Home from './Home';\nimport AddUser from './AddUser';\nimport Cookies from 'js-cookie';\nimport jwtDecode from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminContext = /*#__PURE__*/createContext();\nfunction App() {\n  _s();\n  const [IsUserLoggedIn, setIsUserLoggedIn] = useState(() => {\n    // Initialize the user's login status from localStorage\n    const storedStatus = localStorage.getItem('IsUserLoggedIn');\n    return storedStatus ? JSON.parse(storedStatus) : false;\n  });\n  useEffect(() => {\n    // Load credentials from cookies\n    const credentials = Cookies.get('credentials');\n    if (credentials) {\n      // Check if the credentials are valid (e.g., email_verified)\n      const decoded = jwtDecode(credentials);\n      if (decoded.email_verified) {\n        setIsUserLoggedIn(true);\n      }\n    }\n  }, []);\n  useEffect(() => {\n    // Update localStorage when IsUserLoggedIn changes\n    localStorage.setItem('IsUserLoggedIn', JSON.stringify(IsUserLoggedIn));\n  }, [IsUserLoggedIn]);\n  return /*#__PURE__*/_jsxDEV(AdminContext.Provider, {\n    value: {\n      IsUserLoggedIn,\n      setIsUserLoggedIn\n    },\n    children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/update\",\n          element: IsUserLoggedIn ? /*#__PURE__*/_jsxDEV(AddUser, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/\",\n            replace: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"o1O9HG7DJFSgtnTVZVA9hgUbmVA=\");\n_c = App;\nexport { AdminContext };\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Search","Navbar","Cards","React","useEffect","useContext","useState","createContext","useGoogleOneTapLogin","BrowserRouter","Routes","Route","Navigate","Home","AddUser","Cookies","jwtDecode","jsxDEV","_jsxDEV","AdminContext","App","_s","IsUserLoggedIn","setIsUserLoggedIn","storedStatus","localStorage","getItem","JSON","parse","credentials","get","decoded","email_verified","setItem","stringify","Provider","value","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","_c","$RefreshReg$"],"sources":["D:/Student_Database_IITBH/frontend/src/App.js"],"sourcesContent":["import './App.css';\r\nimport Search from './Components/Search';\r\nimport Navbar from './Components/Navbar';\r\nimport Cards from './Components/Card';\r\nimport React, { useEffect, useContext, useState, createContext } from 'react';\r\nimport { useGoogleOneTapLogin } from '@react-oauth/google';\r\nimport { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';\r\nimport Home from './Home';\r\nimport AddUser from './AddUser';\r\nimport Cookies from 'js-cookie';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nconst AdminContext = createContext();\r\n\r\nfunction App() {\r\n  const [IsUserLoggedIn, setIsUserLoggedIn] = useState(() => {\r\n    // Initialize the user's login status from localStorage\r\n    const storedStatus = localStorage.getItem('IsUserLoggedIn');\r\n    return storedStatus ? JSON.parse(storedStatus) : false;\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Load credentials from cookies\r\n    const credentials = Cookies.get('credentials');\r\n\r\n    if (credentials) {\r\n      // Check if the credentials are valid (e.g., email_verified)\r\n      const decoded = jwtDecode(credentials);\r\n      if (decoded.email_verified) {\r\n        setIsUserLoggedIn(true);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Update localStorage when IsUserLoggedIn changes\r\n    localStorage.setItem('IsUserLoggedIn', JSON.stringify(IsUserLoggedIn));\r\n  }, [IsUserLoggedIn]);\r\n\r\n  return (\r\n    <AdminContext.Provider value={{ IsUserLoggedIn, setIsUserLoggedIn }}>\r\n      <BrowserRouter>\r\n        <Routes>\r\n          <Route path=\"/\" element={<Home />} />\r\n          <Route\r\n            path=\"/update\"\r\n            element={\r\n              IsUserLoggedIn ? (\r\n                <AddUser />\r\n              ) : (\r\n                <Navigate to=\"/\" replace />\r\n              )\r\n            }\r\n          />\r\n        </Routes>\r\n      </BrowserRouter>\r\n    </AdminContext.Provider>\r\n  );\r\n}\r\n\r\nexport { AdminContext };\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}