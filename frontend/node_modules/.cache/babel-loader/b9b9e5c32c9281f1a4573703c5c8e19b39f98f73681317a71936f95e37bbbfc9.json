{"ast":null,"code":"var _jsxFileName = \"D:\\\\Student_Database_IITBH\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport Search from './Components/Search';\nimport Navbar from './Components/Navbar';\nimport Cards from './Components/Card';\nimport React, { useState } from 'react';\nimport { useGoogleOneTapLogin } from '@react-oauth/google';\nimport { GoogleLogin } from '@react-oauth/google';\n// import { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [fetchedData, setFetchedData] = useState(null);\n  const handleFormSubmit = async () => {\n    try {\n      const response = await fetch('https://your-backend-api.com/endpoint', {\n        method: 'POST',\n        // Use POST for creating or updating data\n        headers: {\n          'Content-Type': 'application/json' // Set the appropriate content type\n        },\n\n        body: JSON.stringify(formData) // Convert your data to JSON\n      });\n\n      if (response.ok) {\n        // Request was successful\n        const data = await response.json();\n        console.log('Data sent successfully:', data);\n      } else {\n        // Handle non-successful responses (e.g., error responses)\n        console.error('Error:', response.statusText);\n      }\n    } catch (error) {\n      // Handle network errors or exceptions\n      console.error('Network error:', error);\n    }\n  };\n  const handleSuccess = credentialResponse => {\n    console.log(credentialResponse);\n  };\n  const handleFailure = () => {\n    console.log('Login Failed');\n  };\n  useGoogleOneTapLogin({\n    onSuccess: credentialResponse => {\n      console.log();\n      const response = fetch('http://localhost:8000/oauth2/redirect/google', {\n        method: 'get',\n        // Use POST for creating or updating data\n        headers: {\n          'Content-Type': 'application/json' // Set the appropriate content type\n        },\n\n        body: JSON.stringify(credentialResponse)\n      });\n      console.log(response);\n    },\n    onError: () => {\n      console.log('Login Failed');\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"10px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n      onSuccess: handleFormSubmit,\n      onError: handleFailure,\n      useOneTap: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"EYiRflY+9bxQmfwsT8z27qauBD4=\", false, function () {\n  return [useGoogleOneTapLogin];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Search","Navbar","Cards","React","useState","useGoogleOneTapLogin","GoogleLogin","jsxDEV","_jsxDEV","App","_s","fetchedData","setFetchedData","handleFormSubmit","response","fetch","method","headers","body","JSON","stringify","formData","ok","data","json","console","log","error","statusText","handleSuccess","credentialResponse","handleFailure","onSuccess","onError","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","useOneTap","_c","$RefreshReg$"],"sources":["D:/Student_Database_IITBH/frontend/src/App.js"],"sourcesContent":["import './App.css';\r\nimport Search from './Components/Search';\r\nimport Navbar from './Components/Navbar';\r\nimport Cards from './Components/Card';\r\nimport React, { useState } from 'react';\r\nimport { useGoogleOneTapLogin } from '@react-oauth/google';\r\nimport { GoogleLogin } from '@react-oauth/google';\r\n// import { useHistory } from 'react-router-dom';\r\n\r\nfunction App() {\r\n  const [fetchedData, setFetchedData] = useState(null);\r\n\r\n  const handleFormSubmit = async () => {\r\n    try {\r\n      const response = await fetch('https://your-backend-api.com/endpoint', {\r\n        method: 'POST', // Use POST for creating or updating data\r\n        headers: {\r\n          'Content-Type': 'application/json', // Set the appropriate content type\r\n        },\r\n        body: JSON.stringify(formData), // Convert your data to JSON\r\n      });\r\n\r\n      if (response.ok) {\r\n        // Request was successful\r\n        const data = await response.json();\r\n        console.log('Data sent successfully:', data);\r\n      } else {\r\n        // Handle non-successful responses (e.g., error responses)\r\n        console.error('Error:', response.statusText);\r\n      }\r\n    } catch (error) {\r\n      // Handle network errors or exceptions\r\n      console.error('Network error:', error);\r\n    }\r\n  };\r\n\r\n  const handleSuccess = credentialResponse => {\r\n   \r\n    console.log(credentialResponse);\r\n   \r\n  }\r\n  const handleFailure = () => {\r\n    console.log('Login Failed');\r\n  };\r\n  useGoogleOneTapLogin({\r\n    onSuccess: credentialResponse => {\r\n      console.log();\r\n      const response =  fetch('http://localhost:8000/oauth2/redirect/google', {\r\n        method: 'get', // Use POST for creating or updating data\r\n        headers: {\r\n          'Content-Type': 'application/json', // Set the appropriate content type\r\n        },\r\n        body: JSON.stringify(credentialResponse), \r\n      });\r\n      console.log(response)\r\n    },\r\n    onError: () => {\r\n      console.log('Login Failed');\r\n    },\r\n  });\r\n  return (\r\n    <div style={{ padding: \"10px\" }}>\r\n      <Navbar />\r\n      <Search/>\r\n      <GoogleLogin\r\n  onSuccess={handleFormSubmit}\r\n      onError={handleFailure}\r\n  useOneTap\r\n/>;\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}